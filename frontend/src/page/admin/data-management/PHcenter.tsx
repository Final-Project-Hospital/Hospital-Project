// import React, { useEffect, useState } from 'react';
// import {
//     Form,
//     InputNumber,
//     Button,
//     DatePicker,
//     TimePicker,
//     Select,
//     Input,
//     message,
// } from 'antd';
// import dayjs from 'dayjs';
// import './PHcenter.css';

// import { ListBeforeAfterTreatment, ListStandard, ListUnit, CreatePH } from '../../../services/index';
// import { ListBeforeAfterTreatmentInterface } from '../../../interface/IBeforeAfterTreatment';
// import { ListStandardInterface } from '../../../interface/IStandard';
// import { ListUnitInterface } from '../../../interface/IUnit';
// import { CreatePHInterface } from '../../../interface/IpH';

// const { Option } = Select;

// const PHCentralForm: React.FC = () => {
//     const [form] = Form.useForm();

//     const [beforeAfterOptions, setBeforeAfterOptions] = useState<ListBeforeAfterTreatmentInterface[]>([]);
//     const [unitOptions, setUnitOptions] = useState<ListUnitInterface[]>([]);
//     const [standardOptions, setStandardOptions] = useState<ListStandardInterface[]>([]);
//     const [selectedTreatmentID, setSelectedTreatmentID] = useState<number | null>(null);
//     const [messageApi, contextHolder] = message.useMessage();

//     const renderCustomTreatmentLabel = (text: string) => (
//         <>
//             ‡∏Ñ‡πà‡∏≤ pH ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ö‡πà‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á
//             <span style={{ color: '#f45415ff', fontWeight: 'bold' }}>{text}</span>
//             ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≥‡∏ö‡∏±‡∏î
//         </>
//     );

//     useEffect(() => {
//         const fetchInitialData = async () => {
//             const [beforeAfter, units, standards] = await Promise.all([
//                 ListBeforeAfterTreatment(),
//                 ListUnit(),
//                 ListStandard(),
//             ]);

//             if (beforeAfter) setBeforeAfterOptions(beforeAfter);
//             if (units) setUnitOptions(units);
//             if (standards) setStandardOptions(standards);
//         };

//         fetchInitialData();
//     }, []);

//     const handleFinish = async (values: any) => {
//         console.log("üéØ Form Submitted:", values);
//         try {
//             const dateValue = form.getFieldValue('date') ?? dayjs();
//             const timeValue = form.getFieldValue('time') ?? dayjs();
//             const employeeID = Number(localStorage.getItem("employeeid"));
//             console.log(employeeID)
//             const combinedDate = dateValue.set('hour', timeValue.hour()).set('minute', timeValue.minute());

//             const payload: CreatePHInterface = {
//                 Date: combinedDate.toISOString(),
//                 Data:
//                     selectedTreatmentID === 3
//                         ? (values.valueBefore + values.valueAfter) / 2
//                         : values.data,
//                 BeforeAfterTreatmentID: values.beforeAfterTreatmentID,
//                 StandardID: values.standardID,
//                 UnitID: values.unitID,
//                 EmployeeID: employeeID,
//                 Note: values.note,
//             };


//             const response = await CreatePH(payload);

//             if ((response as any)?.status === 201) {
//                 messageApi.open({
//                     type: 'success',
//                     content: '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
//                 });
//                 form.resetFields();
//                 setSelectedTreatmentID(null);
//             } else {
//                 message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
//             }
//         } catch (error: any) {
//             console.error('Error creating pH:', error.response || error);
//             message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
//         }
//     };

//     const handleCancel = () => {
//         form.resetFields();
//         setSelectedTreatmentID(null);
//     };

//     return (
//         <div className="ph-container">
//             {contextHolder}
//             <Form form={form}
//                 layout="vertical"
//                 onFinish={handleFinish}
//                 initialValues={{
//                     date: dayjs(),
//                     time: dayjs(),
//                 }}>
//                 <div className="form-group-ph">
//                     <Form.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="date">
//                         <DatePicker
//                             defaultValue={dayjs()}
//                             format="DD/MM/YYYY"
//                             className="full-width-ph"
//                             placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô"
//                         />
//                     </Form.Item>

//                     <Form.Item label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="time">
//                         <TimePicker
//                             defaultValue={dayjs()}
//                             format="HH:mm"
//                             className="full-width-ph"
//                             placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤"
//                         />
//                     </Form.Item>
//                 </div>

//                 <div className="form-group-ph">
//                     <Form.Item
//                         label="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î"
//                         name="unitID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î' }]}
//                     >
//                         <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢">
//                             {unitOptions.map((u) => (
//                                 <Option key={u.ID} value={u.ID}>
//                                     {u.UnitName}
//                                 </Option>
//                             ))}
//                         </Select>
//                     </Form.Item>

//                     <Form.Item
//                         label="‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô¬π"
//                         name="standardID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô' }]}
//                     >
//                         <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô">
//                             {standardOptions
//                                 .sort((a, b) => a.StandardValue! - b.StandardValue!)
//                                 .map((s) => (
//                                     <Option key={s.ID} value={s.ID}>
//                                         {s.StandardValue}
//                                     </Option>
//                                 ))}
//                         </Select>
//                     </Form.Item>
//                 </div>

//                 <div className="form-group-ph">
//                     <Form.Item
//                         label="‡∏Å‡πà‡∏≠‡∏ô / ‡∏´‡∏•‡∏±‡∏á / ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡πÄ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                         name="beforeAfterTreatmentID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' }]}
//                     >
//                         <Select
//                             placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
//                             onChange={(value) => {
//                                 setSelectedTreatmentID(value);
//                             }}
//                         >
//                             {beforeAfterOptions.map((b) => (
//                                 <Option key={b.ID} value={b.ID}>
//                                     {renderCustomTreatmentLabel(b.TreatmentName || '')}
//                                 </Option>
//                             ))}
//                         </Select>
//                     </Form.Item>

//                     {selectedTreatmentID === 3 ? (
//                         <div style={{ display: 'flex', gap: '30px' }}>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                                 name="valueBefore"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber style={{ width: '100%' }} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î"/>
//                             </Form.Item>

//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                                 name="valueAfter"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber style={{ width: '100%' }} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î"/>
//                             </Form.Item>
//                         </div>
//                     ) : (
//                         <Form.Item
//                             label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ"
//                             name="data"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ' }]}
//                         >
//                             <InputNumber style={{ width: '100%' }} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ"/>
//                         </Form.Item>
//                     )}
//                 </div>

//                 <div className="form-group-ph">
//                     <Form.Item label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" name="note">
//                         <Input.TextArea rows={2} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" />
//                     </Form.Item>
//                 </div>

//                 <Form.Item className="form-actions-ph">
//                     <Button className="cancel-ph" htmlType="button" onClick={handleCancel}>
//                         ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
//                     </Button>
//                     <Button htmlType="reset" className="reset-ph">
//                         ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
//                     </Button>
//                     <Button type="primary" htmlType="submit" className="submit-ph">
//                         ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
//                     </Button>
//                 </Form.Item>
//             </Form>
//         </div>
//     );
// };

// export default PHCentralForm;




// import React, { useEffect, useState } from 'react';
// import {
//     Form,
//     InputNumber,
//     Button,
//     DatePicker,
//     TimePicker,
//     Select,
//     Input,
//     message,
// } from 'antd';
// import dayjs from 'dayjs';
// import './PHcenter.css';

// import { ListBeforeAfterTreatment, ListStandard, ListUnit, CreatePH } from '../../../services/index';
// import { ListBeforeAfterTreatmentInterface } from '../../../interface/IBeforeAfterTreatment';
// import { ListStandardInterface } from '../../../interface/IStandard';
// import { ListUnitInterface } from '../../../interface/IUnit';
// import { CreatePHInterface } from '../../../interface/IpH';

// const { Option } = Select;

// const PHCentralForm: React.FC = () => {
//     const [form] = Form.useForm();

//     const [beforeAfterOptions, setBeforeAfterOptions] = useState<ListBeforeAfterTreatmentInterface[]>([]);
//     const [unitOptions, setUnitOptions] = useState<ListUnitInterface[]>([]);
//     const [standardOptions, setStandardOptions] = useState<ListStandardInterface[]>([]);
//     const [selectedTreatmentID, setSelectedTreatmentID] = useState<number | null>(null);
//     const [messageApi, contextHolder] = message.useMessage();

//     const renderCustomTreatmentLabel = (text: string) => (
//         <>
//             ‡∏Ñ‡πà‡∏≤ pH ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ö‡πà‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á
//             <span style={{ color: '#f45415ff', fontWeight: 'bold' }}>{text}</span>
//             ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≥‡∏ö‡∏±‡∏î
//         </>
//     );

//     useEffect(() => {
//         const fetchInitialData = async () => {
//             const [beforeAfter, units, standards] = await Promise.all([
//                 ListBeforeAfterTreatment(),
//                 ListUnit(),
//                 ListStandard(),
//             ]);

//             if (beforeAfter) setBeforeAfterOptions(beforeAfter);
//             if (units) setUnitOptions(units);
//             if (standards) setStandardOptions(standards);
//         };

//         fetchInitialData();
//     }, []);

//     const handleFinish = async (values: any) => {
//         console.log("üéØ Form Submitted:", values);
//         try {
//             const dateValue = form.getFieldValue('date') ?? dayjs();
//             const timeValue = form.getFieldValue('time') ?? dayjs();
//             const employeeID = Number(localStorage.getItem("employeeid"));
//             const combinedDate = dateValue.set('hour', timeValue.hour()).set('minute', timeValue.minute());

//             if (selectedTreatmentID === 3) {
//                 // ‡∏™‡πà‡∏á 2 record: ‡∏Å‡πà‡∏≠‡∏ô(1) ‡πÅ‡∏•‡∏∞ ‡∏´‡∏•‡∏±‡∏á(2)
//                 const payloadBefore: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.valueBefore,
//                     BeforeAfterTreatmentID: 1,
//                     StandardID: values.standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const payloadAfter: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.valueAfter,
//                     BeforeAfterTreatmentID: 2,
//                     StandardID: values.standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const res1 = await CreatePH(payloadBefore);
//                 const res2 = await CreatePH(payloadAfter);

//                 if ((res1 as any)?.status === 201 && (res2 as any)?.status === 201) {
//                     messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡πÄ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
//                     form.resetFields();
//                     setSelectedTreatmentID(null);
//                 } else {
//                     message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ');
//                 }
//             } else {
//                 // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á)
//                 const payload: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.data,
//                     BeforeAfterTreatmentID: values.beforeAfterTreatmentID,
//                     StandardID: values.standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const response = await CreatePH(payload);

//                 if ((response as any)?.status === 201) {
//                     messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
//                     form.resetFields();
//                     setSelectedTreatmentID(null);
//                 } else {
//                     message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
//                 }
//             }
//         } catch (error: any) {
//             console.error('Error creating pH:', error.response || error);
//             message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
//         }
//     };

//     const handleCancel = () => {
//         form.resetFields();
//         setSelectedTreatmentID(null);
//     };

//     return (
//         <div className="ph-container">
//             {contextHolder}
//             <Form
//                 form={form}
//                 layout="vertical"
//                 onFinish={handleFinish}
//                 initialValues={{
//                     date: dayjs(),
//                     time: dayjs(),
//                 }}
//             >
//                 <div className="form-group-ph">
//                     <Form.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="date">
//                         <DatePicker
//                             defaultValue={dayjs()}
//                             format="DD/MM/YYYY"
//                             className="full-width-ph"
//                             placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô"
//                         />
//                     </Form.Item>

//                     <Form.Item label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="time">
//                         <TimePicker
//                             defaultValue={dayjs()}
//                             format="HH:mm"
//                             className="full-width-ph"
//                             placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤"
//                         />
//                     </Form.Item>
//                 </div>

//                 <div className="form-group-ph">
//                     <Form.Item
//                         label="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î"
//                         name="unitID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î' }]}
//                     >
//                         <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢">
//                             {unitOptions.map((u) => (
//                                 <Option key={u.ID} value={u.ID}>
//                                     {u.UnitName}
//                                 </Option>
//                             ))}
//                         </Select>
//                     </Form.Item>

//                     <Form.Item
//                         label="‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô¬π"
//                         name="standardID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô' }]}
//                     >
//                         <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô">
//                             {standardOptions
//                                 .sort((a, b) => a.StandardValue! - b.StandardValue!)
//                                 .map((s) => (
//                                     <Option key={s.ID} value={s.ID}>
//                                         {s.StandardValue}
//                                     </Option>
//                                 ))}
//                         </Select>
//                     </Form.Item>
//                 </div>

//                 <div className="form-group-ph">
//                     <div className='form-group-mini-ph'>
//                     <Form.Item
//                         label="‡∏Å‡πà‡∏≠‡∏ô / ‡∏´‡∏•‡∏±‡∏á / ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡πÄ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                         name="beforeAfterTreatmentID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' }]}
//                     >
//                         <Select
//                             placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
//                             onChange={(value) => {
//                                 setSelectedTreatmentID(value);
//                             }}
//                         >
//                             {beforeAfterOptions.map((b) => (
//                                 <Option key={b.ID} value={b.ID}>
//                                     {renderCustomTreatmentLabel(b.TreatmentName || '')}
//                                 </Option>
//                             ))}
//                         </Select>
//                     </Form.Item>
//                     </div>
//                     <div className='form-group-mini-ph'>
//                     {selectedTreatmentID === 3 ? (
//                         <div style={{ display: 'flex', gap: '30px' }}>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                                 name="valueBefore"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber style={{ width: '100%' }} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
//                             </Form.Item>

//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                                 name="valueAfter"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber style={{ width: '100%' }} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
//                             </Form.Item>
//                         </div>
//                     ) : (
//                         <Form.Item
//                             label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ"
//                             name="data"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ' }]}
//                         >
//                             <InputNumber style={{ width: '100%' }} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ" />
//                         </Form.Item>
//                     )}
//                     </div>
//                 </div>

//                 <div className="form-group-ph">
//                     <Form.Item label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" name="note">
//                         <Input.TextArea rows={2} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" />
//                     </Form.Item>
//                 </div>

//                 <Form.Item className="form-actions-ph">
//                     <Button className="cancel-ph" htmlType="button" onClick={handleCancel}>
//                         ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
//                     </Button>
//                     <Button htmlType="reset" className="reset-ph">
//                         ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
//                     </Button>
//                     <Button type="primary" htmlType="submit" className="submit-ph">
//                         ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
//                     </Button>
//                 </Form.Item>
//             </Form>
//         </div>
//     );
// };

// export default PHCentralForm;


// import React, { useEffect, useState } from 'react';
// import {
//     Form,
//     InputNumber,
//     Button,
//     DatePicker,
//     TimePicker,
//     Select,
//     Input,
//     message,
// } from 'antd';
// import dayjs from 'dayjs';
// import './PHcenter.css';

// import {
//     ListBeforeAfterTreatment,
//     ListStandard,
//     ListUnit,
//     CreatePH,
// } from '../../../services/index';
// import { ListBeforeAfterTreatmentInterface } from '../../../interface/IBeforeAfterTreatment';
// import { ListStandardInterface } from '../../../interface/IStandard';
// import { ListUnitInterface } from '../../../interface/IUnit';
// import { CreatePHInterface } from '../../../interface/IpH';

// const { Option } = Select;

// const PHCentralForm: React.FC = () => {
//     const [form] = Form.useForm();

//     const [beforeAfterOptions, setBeforeAfterOptions] = useState<ListBeforeAfterTreatmentInterface[]>([]);
//     const [unitOptions, setUnitOptions] = useState<ListUnitInterface[]>([]);
//     const [standardOptions, setStandardOptions] = useState<ListStandardInterface[]>([]);
//     const [selectedTreatmentID, setSelectedTreatmentID] = useState<number | null>(null);
//     const [standardType, setStandardType] = useState<string>('middle');
//     const [messageApi, contextHolder] = message.useMessage();

//     const renderCustomTreatmentLabel = (text: string) => (
//         <>
//             ‡∏Ñ‡πà‡∏≤ pH ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ö‡πà‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á
//             <span style={{ color: '#f45415ff', fontWeight: 'bold' }}>{text}</span>
//             ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≥‡∏ö‡∏±‡∏î
//         </>
//     );

//     useEffect(() => {
//         const fetchInitialData = async () => {
//             const [beforeAfter, units, standards] = await Promise.all([
//                 ListBeforeAfterTreatment(),
//                 ListUnit(),
//                 ListStandard(),
//             ]);

//             if (beforeAfter) setBeforeAfterOptions(beforeAfter);
//             if (units) setUnitOptions(units);
//             if (standards) setStandardOptions(standards);
//         };

//         fetchInitialData();
//     }, []);

//     const handleFinish = async (values: any) => {
//         console.log('üéØ Form Submitted:', values);
//         try {
//             const dateValue = form.getFieldValue('date') ?? dayjs();
//             const timeValue = form.getFieldValue('time') ?? dayjs();
//             const employeeID = Number(localStorage.getItem('employeeid'));
//             const combinedDate = dateValue.set('hour', timeValue.hour()).set('minute', timeValue.minute());

//             const standardID = values.standardID;
//             const customMin = values.customMin;
//             const customMax = values.customMax;

//             if (selectedTreatmentID === 3) {
//                 const payloadBefore: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.valueBefore,
//                     BeforeAfterTreatmentID: 1,
//                     StandardID: standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const payloadAfter: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.valueAfter,
//                     BeforeAfterTreatmentID: 2,
//                     StandardID: standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const res1 = await CreatePH(payloadBefore);
//                 const res2 = await CreatePH(payloadAfter);

//                 if ((res1 as any)?.status === 201 && (res2 as any)?.status === 201) {
//                     messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
//                     form.resetFields();
//                     setSelectedTreatmentID(null);
//                 } else {
//                     message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ');
//                 }
//             } else {
//                 const payload: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.data,
//                     BeforeAfterTreatmentID: values.beforeAfterTreatmentID,
//                     StandardID: standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const response = await CreatePH(payload);

//                 if ((response as any)?.status === 201) {
//                     messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
//                     form.resetFields();
//                     setSelectedTreatmentID(null);
//                 } else {
//                     message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
//                 }
//             }
//         } catch (error: any) {
//             console.error('Error creating pH:', error.response || error);
//             message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
//         }
//     };

//     const handleCancel = () => {
//         form.resetFields();
//         setSelectedTreatmentID(null);
//     };

//     return (
//         <div className="ph-container">
//             {contextHolder}
//             <Form
//                 form={form}
//                 layout="vertical"
//                 onFinish={handleFinish}
//                 initialValues={{
//                     date: dayjs(),
//                     time: dayjs(),
//                     standardType: 'middle',
//                 }}
//             >
//                 <div className="form-group-ph">
//                     <Form.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="date">
//                         <DatePicker format="DD/MM/YYYY" className="full-width-ph" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô" />
//                     </Form.Item>

//                     <Form.Item label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="time">
//                         <TimePicker format="HH:mm" className="full-width-ph" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤" />
//                     </Form.Item>
//                 </div>

//                 <div className="form-group-ph">
//                     <Form.Item
//                         label="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î"
//                         name="unitID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î' }]}
//                     >
//                         <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢">
//                             {unitOptions.map((u) => (
//                                 <Option key={u.ID} value={u.ID}>
//                                     {u.UnitName}
//                                 </Option>
//                             ))}
//                         </Select>
//                     </Form.Item>

//                     {/* <Form.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" name="standardType">
//                         <Select defaultValue="middle" onChange={(value) => setStandardType(value)}>
//                             <Option value="middle">‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á)</Option>
//                             <Option value="range">‡∏ä‡πà‡∏ß‡∏á (Min - Max)</Option>
//                             <Option value="custom">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á</Option>
//                         </Select>
//                     </Form.Item>

//                     {standardType === 'middle' && (
//                         <Form.Item
//                             label="‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á (Middle)"
//                             name="standardID"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á' }]}
//                         >
//                             <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á">
//                                 {standardOptions.map((s) => (
//                                     <Option key={s.ID} value={s.ID}>
//                                         {s.MiddleValue}
//                                     </Option>
//                                 ))}
//                             </Select>
//                         </Form.Item>
//                     )}

//                     {standardType === 'range' && (
//                         <Form.Item
//                             label="‡∏ä‡πà‡∏ß‡∏á (Min - Max)"
//                             name="standardID"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô' }]}
//                         >
//                             <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á">
//                                 {standardOptions.map((s) => (
//                                     <Option key={s.ID} value={s.ID}>
//                                         {s.MinValue} - {s.MaxValue}
//                                     </Option>
//                                 ))}
//                             </Select>
//                         </Form.Item>
//                     )}

//                     {standardType === 'custom' && (
//                         <div style={{ display: 'flex', gap: '16px' }}>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Min)"
//                                 name="customMin"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber placeholder="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î" style={{ width: '100%' }} />
//                             </Form.Item>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Max)"
//                                 name="customMax"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber placeholder="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î" style={{ width: '100%' }} />
//                             </Form.Item>
//                         </div>
//                     )}
//                 </div> */}



//                     {/* <Form.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" name="standardType">
//                         <Select defaultValue="middle" onChange={(value) => setStandardType(value)}>
//                             <Option value="middle">‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß</Option>
//                             <Option value="range">‡∏ä‡πà‡∏ß‡∏á (Min - Max)</Option>
//                             <Option value="custom-single">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)</Option>
//                             <Option value="custom-range">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏ä‡πà‡∏ß‡∏á (Min - Max))</Option>
//                         </Select>
//                     </Form.Item>

//                     {standardType === 'middle' && (
//                         <Form.Item
//                             label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"
//                             name="standardID"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß' }]}
//                         >
//                             <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß">
//                                 {standardOptions.map((s) => (
//                                     <Option key={s.ID} value={s.ID}>
//                                         {s.MiddleValue}
//                                     </Option>
//                                 ))}
//                             </Select>
//                         </Form.Item>
//                     )}

//                     {standardType === 'range' && (
//                         <Form.Item
//                             label="‡∏ä‡πà‡∏ß‡∏á (Min - Max)"
//                             name="standardID"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô' }]}
//                         >
//                             <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á">
//                                 {standardOptions.map((s) => (
//                                     <Option key={s.ID} value={s.ID}>
//                                         {s.MinValue} - {s.MaxValue}
//                                     </Option>
//                                 ))}
//                             </Select>
//                         </Form.Item>
//                     )}

//                     {standardType === 'custom-single' && (
//                         <Form.Item
//                             label="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)"
//                             name="customSingle"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á' }]}
//                         >
//                             <InputNumber placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á" style={{ width: '100%' }} />
//                         </Form.Item>
//                     )}

//                     {standardType === 'custom-range' && (
//                         <div style={{ display: 'flex', gap: '16px' }}>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Min)"
//                                 name="customMin"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber placeholder="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î" style={{ width: '100%' }} />
//                             </Form.Item>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Max)"
//                                 name="customMax"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber placeholder="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î" style={{ width: '100%' }} />
//                             </Form.Item>
//                         </div>
//                     )}
//                 </div> */}


//                     <Form.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" name="standardType">
//                         <Select defaultValue="middle" onChange={(value) => setStandardType(value)}>
//                             <Option value="middle">‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß</Option>
//                             <Option value="range">‡∏ä‡πà‡∏ß‡∏á (Min - Max)</Option>
//                         </Select>
//                     </Form.Item>

//                     {/* ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß */}
//                     {standardType === 'middle' && (
//                         <>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"
//                                 name="standardID"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß' }]}
//                             >
//                                 <Select
//                                     placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"
//                                     onChange={(value) => {
//                                         if (value === 'custom') {
//                                             form.setFieldsValue({ standardID: undefined }); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
//                                             setStandardType('custom-single');
//                                         }
//                                     }}
//                                 >
//                                     {standardOptions.map((s) => (
//                                         <Option key={s.ID} value={s.ID}>
//                                             {s.MiddleValue}
//                                         </Option>
//                                     ))}
//                                     <Option value="custom">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)</Option>
//                                 </Select>
//                             </Form.Item>
//                         </>
//                     )}

//                     {standardType === 'custom-single' && (
//                         <Form.Item
//                             label="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)"
//                             name="customSingle"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á' }]}
//                         >
//                             <InputNumber placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á" style={{ width: '100%' }} />
//                         </Form.Item>
//                     )}

//                     {/* ‡∏ä‡πà‡∏ß‡∏á */}
//                     {standardType === 'range' && (
//                         <>
//                             <Form.Item
//                                 label="‡∏ä‡πà‡∏ß‡∏á (Min - Max)"
//                                 name="standardID"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô' }]}
//                             >
//                                 <Select
//                                     placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á"
//                                     onChange={(value) => {
//                                         if (value === 'custom') setStandardType('custom-range');
//                                     }}
//                                 >
//                                     {standardOptions.map((s) => (
//                                         <Option key={s.ID} value={s.ID}>
//                                             {s.MinValue} - {s.MaxValue}
//                                         </Option>
//                                     ))}
//                                     <Option value="custom">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏ä‡πà‡∏ß‡∏á)</Option>
//                                 </Select>
//                             </Form.Item>
//                         </>
//                     )}

//                     {/* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß) */}
//                     {standardType === 'custom-single' && (
//                         <Form.Item
//                             label="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)"
//                             name="customSingle"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á' }]}
//                         >
//                             <InputNumber placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á" style={{ width: '100%' }} />
//                         </Form.Item>
//                     )}

//                     {/* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏ä‡πà‡∏ß‡∏á) */}
//                     {standardType === 'custom-range' && (
//                         <div style={{ display: 'flex', gap: '16px' }}>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Min)"
//                                 name="customMin"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber placeholder="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î" style={{ width: '100%' }} />
//                             </Form.Item>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Max)"
//                                 name="customMax"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber placeholder="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î" style={{ width: '100%' }} />
//                             </Form.Item>
//                         </div>
//                     )}
//                 </div>


//                 <div className="form-group-ph">
//                     <Form.Item
//                         label="‡∏Å‡πà‡∏≠‡∏ô / ‡∏´‡∏•‡∏±‡∏á / ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                         name="beforeAfterTreatmentID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' }]}
//                     >
//                         <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" onChange={(value) => setSelectedTreatmentID(value)}>
//                             {beforeAfterOptions.map((b) => (
//                                 <Option key={b.ID} value={b.ID}>
//                                     {renderCustomTreatmentLabel(b.TreatmentName || '')}
//                                 </Option>
//                             ))}
//                         </Select>
//                     </Form.Item>

//                     {selectedTreatmentID === 3 ? (
//                         <div style={{ display: 'flex', gap: '30px' }}>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                                 name="valueBefore"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
//                             </Form.Item>

//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                                 name="valueAfter"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
//                             </Form.Item>
//                         </div>
//                     ) : (
//                         <Form.Item
//                             label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ"
//                             name="data"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ' }]}
//                         >
//                             <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ" />
//                         </Form.Item>
//                     )}
//                 </div>

//                 <div className="form-group-ph">
//                     <Form.Item label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" name="note">
//                         <Input.TextArea rows={2} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" />
//                     </Form.Item>
//                 </div>

//                 <Form.Item className="form-actions-ph">
//                     <Button className="cancel-ph" htmlType="button" onClick={handleCancel}>
//                         ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
//                     </Button>
//                     <Button htmlType="reset" className="reset-ph">
//                         ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
//                     </Button>
//                     <Button type="primary" htmlType="submit" className="submit-ph">
//                         ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
//                     </Button>
//                 </Form.Item>
//             </Form>
//         </div>
//     );
// };

// export default PHCentralForm;




/*true */
// import React, { useEffect, useState } from 'react';
// import {
//     Form,
//     InputNumber,
//     Button,
//     DatePicker,
//     TimePicker,
//     Select,
//     Input,
//     message,
// } from 'antd';
// import dayjs from 'dayjs';
// import './PHcenter.css';

// import {
//     ListBeforeAfterTreatment,
//     ListStandard,
//     ListUnit,
//     CreatePH,
// } from '../../../services/index';
// import { ListBeforeAfterTreatmentInterface } from '../../../interface/IBeforeAfterTreatment';
// import { ListStandardInterface } from '../../../interface/IStandard';
// import { ListUnitInterface } from '../../../interface/IUnit';
// import { CreatePHInterface } from '../../../interface/IpH';

// const { Option } = Select;

// const PHCentralForm: React.FC = () => {
//     const [form] = Form.useForm();

//     const [beforeAfterOptions, setBeforeAfterOptions] = useState<ListBeforeAfterTreatmentInterface[]>([]);
//     const [unitOptions, setUnitOptions] = useState<ListUnitInterface[]>([]);
//     const [standardOptions, setStandardOptions] = useState<ListStandardInterface[]>([]);
//     const [selectedTreatmentID, setSelectedTreatmentID] = useState<number | null>(null);

//     const [standardType, setStandardType] = useState<string>('middle'); // middle or range
//     const [useCustomStandard, setUseCustomStandard] = useState<boolean>(false);

//     const [messageApi, contextHolder] = message.useMessage();

//     const renderCustomTreatmentLabel = (text: string) => (
//         <>
//             ‡∏Ñ‡πà‡∏≤ pH ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ö‡πà‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á
//             <span style={{ color: '#f45415ff', fontWeight: 'bold' }}>{text}</span>
//             ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≥‡∏ö‡∏±‡∏î
//         </>
//     );

//     useEffect(() => {
//         const fetchInitialData = async () => {
//             const [beforeAfter, units, standards] = await Promise.all([
//                 ListBeforeAfterTreatment(),
//                 ListUnit(),
//                 ListStandard(),
//             ]);
//             if (beforeAfter) setBeforeAfterOptions(beforeAfter);
//             if (units) setUnitOptions(units);
//             if (standards) setStandardOptions(standards);
//         };
//         fetchInitialData();
//     }, []);

//     const handleStandardGroupChange = (value: string) => {
//         setStandardType(value);
//         setUseCustomStandard(false);
//         form.setFieldsValue({
//             standardID: undefined,
//             customSingle: undefined,
//             customMin: undefined,
//             customMax: undefined,
//         });
//     };

//     const handleStandardSelectChange = (value: string) => {
//         if (value === 'custom') {
//             setUseCustomStandard(true);
//             form.setFieldsValue({ standardID: undefined });
//         } else {
//             setUseCustomStandard(false);
//         }
//     };

//     const handleFinish = async (values: any) => {
//         try {
//             const dateValue = values.date ?? dayjs();
//             const timeValue = values.time ?? dayjs();
//             const combinedDate = dateValue.set('hour', timeValue.hour()).set('minute', timeValue.minute());
//             const employeeID = Number(localStorage.getItem('employeeid'));

//             const standardID = values.standardID ?? null;
//             const customSingle = values.customSingle;
//             const customMin = values.customMin;
//             const customMax = values.customMax;

//             if (selectedTreatmentID === 3) {
//                 const payloadBefore: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.valueBefore,
//                     BeforeAfterTreatmentID: 1,
//                     StandardID: standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const payloadAfter: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.valueAfter,
//                     BeforeAfterTreatmentID: 2,
//                     StandardID: standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const res1 = await CreatePH(payloadBefore);
//                 const res2 = await CreatePH(payloadAfter);

//                 if ((res1 as any)?.status === 201 && (res2 as any)?.status === 201) {
//                     messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
//                     form.resetFields();
//                     setSelectedTreatmentID(null);
//                     setUseCustomStandard(false);
//                 } else {
//                     message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ');
//                 }
//             } else {
//                 const payload: CreatePHInterface = {
//                     Date: combinedDate.toISOString(),
//                     Data: values.data,
//                     BeforeAfterTreatmentID: values.beforeAfterTreatmentID,
//                     StandardID: standardID,
//                     UnitID: values.unitID,
//                     EmployeeID: employeeID,
//                     Note: values.note,
//                 };

//                 const response = await CreatePH(payload);

//                 if ((response as any)?.status === 201) {
//                     messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
//                     form.resetFields();
//                     setSelectedTreatmentID(null);
//                     setUseCustomStandard(false);
//                 } else {
//                     message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
//                 }
//             }
//         } catch (error: any) {
//             console.error('Error creating pH:', error);
//             message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
//         }
//     };

//     const handleCancel = () => {
//         form.resetFields();
//         setSelectedTreatmentID(null);
//         setUseCustomStandard(false);
//     };

//     return (
//         <div className="ph-container">
//             {contextHolder}
//             <Form
//                 form={form}
//                 layout="vertical"
//                 onFinish={handleFinish}
//                 initialValues={{
//                     date: dayjs(),
//                     time: dayjs(),
//                     standardType: 'middle',
//                 }}
//             >
//                 <div className="form-group-ph">
//                     <Form.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="date">
//                         <DatePicker format="DD/MM/YYYY" className="full-width-ph" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô" />
//                     </Form.Item>
//                     <Form.Item label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="time">
//                         <TimePicker format="HH:mm" className="full-width-ph" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤" />
//                     </Form.Item>
//                 </div>

//                 <div className="form-group-ph" >
//                     <div className='form-group-mini-ph'>
//                         <Form.Item
//                             label="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î"
//                             name="unitID"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î' }]}
//                         >
//                             <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢">
//                                 {unitOptions.map((u) => (
//                                     <Option key={u.ID} value={u.ID}>
//                                         {u.UnitName}
//                                     </Option>
//                                 ))}
//                             </Select>
//                         </Form.Item>
//                     </div>
//                     <div className='form-group-mini-ph' >
//                         <Form.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" name="standardType" >
//                             <Select defaultValue="middle" onChange={handleStandardGroupChange}>
//                                 <Option value="middle">‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß</Option>
//                                 <Option value="range">‡∏ä‡πà‡∏ß‡∏á (Min - Max)</Option>
//                             </Select>
//                         </Form.Item>
//                         <div style={{ position: 'relative', top: '-15px' }}>
//                         {/* ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß */}
//                         {standardType === 'middle' && !useCustomStandard && (
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"
//                                 name="standardID"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß' }]}
//                             >
//                                 <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß" onChange={handleStandardSelectChange}>
//                                     {standardOptions.map((s) => (
//                                         <Option key={s.ID} value={s.ID}>
//                                             {s.MiddleValue}
//                                         </Option>
//                                     ))}
//                                     <Option value="custom">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)</Option>
//                                 </Select>
//                             </Form.Item>
//                         )}

//                         {standardType === 'middle' && useCustomStandard && (
//                             <Form.Item
//                                 label="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)"
//                                 name="customSingle"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á' }]}
//                             >
//                                 <InputNumber placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á" style={{ width: '100%' }} />
//                             </Form.Item>
//                         )}

//                         {/* ‡∏ä‡πà‡∏ß‡∏á */}
//                         {standardType === 'range' && !useCustomStandard && (
//                             <Form.Item
//                                 label="‡∏ä‡πà‡∏ß‡∏á (Min - Max)"
//                                 name="standardID"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô' }]}
//                             >
//                                 <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á" onChange={handleStandardSelectChange}>
//                                     {standardOptions.map((s) => (
//                                         <Option key={s.ID} value={s.ID}>
//                                             {s.MinValue} - {s.MaxValue}
//                                         </Option>
//                                     ))}
//                                     <Option value="custom">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏ä‡πà‡∏ß‡∏á)</Option>
//                                 </Select>
//                             </Form.Item>
//                         )}

//                         {standardType === 'range' && useCustomStandard && (
//                             <div className='ph-fornt-small'>
//                                 <Form.Item
//                                     label="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Min)"
//                                     name="customMin"
//                                     rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î' }]}
//                                     style={{ flex: 1 }}
//                                 >
//                                     <InputNumber placeholder="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î" style={{ width: '100%' }} />
//                                 </Form.Item>
//                                 <Form.Item
//                                     label="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Max)"
//                                     name="customMax"
//                                     rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î' }]}
//                                     style={{ flex: 1 }}
//                                 >
//                                     <InputNumber placeholder="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î" style={{ width: '100%' }} />
//                                 </Form.Item>
//                             </div>
//                         )}
//                         </div>
//                     </div>
//                 </div>

//                 <div className="form-group-ph">
//                     <div className='form-group-mini-ph' >
//                     <Form.Item
//                         label="‡∏Å‡πà‡∏≠‡∏ô / ‡∏´‡∏•‡∏±‡∏á / ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                         name="beforeAfterTreatmentID"
//                         rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' }]}
//                     >
//                         <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" onChange={(value) => setSelectedTreatmentID(value)}>
//                             {beforeAfterOptions.map((b) => (
//                                 <Option key={b.ID} value={b.ID}>
//                                     {renderCustomTreatmentLabel(b.TreatmentName || '')}
//                                 </Option>
//                             ))}
//                         </Select>
//                     </Form.Item>
//                     </div>
//                     <div className='form-group-mini-ph' >
//                     {selectedTreatmentID === 3 ? (
//                         <div style={{ display: 'flex', gap: '30px' }}>
//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                                 name="valueBefore"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
//                             </Form.Item>

//                             <Form.Item
//                                 label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
//                                 name="valueAfter"
//                                 rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
//                                 style={{ flex: 1 }}
//                             >
//                                 <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
//                             </Form.Item>
//                         </div>
//                     ) : (
//                         <Form.Item
//                             label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ"
//                             name="data"
//                             rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ' }]}
//                         >
//                             <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ" />
//                         </Form.Item>
//                     )}
//                     </div>
//                 </div>

//                 <div className="form-group-ph">
//                     <Form.Item label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" name="note">
//                         <Input.TextArea rows={2} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" />
//                     </Form.Item>
//                 </div>

//                 <Form.Item className="form-actions-ph">
//                     <Button className="cancel-ph" htmlType="button" onClick={handleCancel}>
//                         ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
//                     </Button>
//                     <Button htmlType="reset" className="reset-ph">
//                         ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
//                     </Button>
//                     <Button type="primary" htmlType="submit" className="submit-ph">
//                         ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
//                     </Button>
//                 </Form.Item>
//             </Form>
//         </div>
//     );
// };

// export default PHCentralForm;



import React, { useEffect, useState } from 'react';
import {
    Form,
    InputNumber,
    Button,
    DatePicker,
    TimePicker,
    Select,
    Input,
    message,
} from 'antd';
import dayjs from 'dayjs';
import './PHcenter.css';

import {
    ListBeforeAfterTreatment,
    ListMiddleStandard,
    ListRangeStandard,
    AddMiddleStandard,
    AddRangeStandard,
    ListUnit,
    CreatePH,
} from '../../../services/index';

import { ListBeforeAfterTreatmentInterface } from '../../../interface/IBeforeAfterTreatment';
import { ListMiddleStandardInterface, ListRangeStandardInterface } from '../../../interface/IStandard';
import { ListUnitInterface } from '../../../interface/IUnit';
import { CreatePHInterface } from '../../../interface/IpH';

const { Option } = Select;

const PHCentralForm: React.FC = () => {
    const [form] = Form.useForm();

    const [beforeAfterOptions, setBeforeAfterOptions] = useState<ListBeforeAfterTreatmentInterface[]>([]);
    const [unitOptions, setUnitOptions] = useState<ListUnitInterface[]>([]);
    const [middleStandards, setMiddleStandards] = useState<ListMiddleStandardInterface[]>([]);
    const [rangeStandards, setRangeStandards] = useState<ListRangeStandardInterface[]>([]);
    const [selectedTreatmentID, setSelectedTreatmentID] = useState<number | null>(null);

    const [standardType, setStandardType] = useState<string>('middle'); // middle or range
    const [useCustomStandard, setUseCustomStandard] = useState<boolean>(false);

    const [customSingleValue, setCustomSingleValue] = useState<number | undefined>(undefined);
    const [customMinValue, setCustomMinValue] = useState<number | undefined>(undefined);
    const [customMaxValue, setCustomMaxValue] = useState<number | undefined>(undefined);

    const [messageApi, contextHolder] = message.useMessage();

    const renderCustomTreatmentLabel = (text: string) => (
        <>
            ‡∏Ñ‡πà‡∏≤ pH ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ö‡πà‡∏≠‡∏û‡∏±‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á
            <span style={{ color: '#f45415ff', fontWeight: 'bold' }}>{text}</span>
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≥‡∏ö‡∏±‡∏î
        </>
    );

    useEffect(() => {
        const fetchInitialData = async () => {
            const [beforeAfter, units, standardsMiddle, standardsRange] = await Promise.all([
                ListBeforeAfterTreatment(),
                ListUnit(),
                ListMiddleStandard(),
                ListRangeStandard(),
            ]);

            if (beforeAfter) setBeforeAfterOptions(beforeAfter);
            if (units) setUnitOptions(units);
            if (standardsMiddle) setMiddleStandards(standardsMiddle);
            if (standardsRange) setRangeStandards(standardsRange);
        };
        fetchInitialData();
    }, []);

    const handleStandardGroupChange = (value: string) => {
        setStandardType(value);
        setUseCustomStandard(false);
        form.setFieldsValue({
            standardID: undefined,
            customSingle: undefined,
            customMin: undefined,
            customMax: undefined,
        });
    };

    const handleStandardSelectChange = (value: string) => {
        if (value === 'custom') {
            setUseCustomStandard(true);
            form.setFieldsValue({ standardID: undefined });
        } else {
            setUseCustomStandard(false);
        }
    };

    // const handleFinish = async (values: any) => {
    //     try {
    //         const dateValue = values.date ?? dayjs();
    //         const timeValue = values.time ?? dayjs();
    //         const combinedDate = dateValue.set('hour', timeValue.hour()).set('minute', timeValue.minute());
    //         const employeeID = Number(localStorage.getItem('employeeid'));

    //         const standardID = values.standardID ?? null;
    //         const customSingle = values.customSingle;
    //         const customMin = values.customMin;
    //         const customMax = values.customMax;

    //         if (selectedTreatmentID === 3) {
    //             const payloadBefore: CreatePHInterface = {
    //                 Date: combinedDate.toISOString(),
    //                 Data: values.valueBefore,
    //                 BeforeAfterTreatmentID: 1,
    //                 StandardID: standardID,
    //                 UnitID: values.unitID,
    //                 EmployeeID: employeeID,
    //                 Note: values.note,
    //             };

    //             const payloadAfter: CreatePHInterface = {
    //                 Date: combinedDate.toISOString(),
    //                 Data: values.valueAfter,
    //                 BeforeAfterTreatmentID: 2,
    //                 StandardID: standardID,
    //                 UnitID: values.unitID,
    //                 EmployeeID: employeeID,
    //                 Note: values.note,
    //             };

    //             const res1 = await CreatePH(payloadBefore);
    //             const res2 = await CreatePH(payloadAfter);

    //             if ((res1 as any)?.status === 201 && (res2 as any)?.status === 201) {
    //                 messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    //                 form.resetFields();
    //                 setSelectedTreatmentID(null);
    //                 setUseCustomStandard(false);
    //             } else {
    //                 message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ');
    //             }
    //         } else {
    //             const payload: CreatePHInterface = {
    //                 Date: combinedDate.toISOString(),
    //                 Data: values.data,
    //                 BeforeAfterTreatmentID: values.beforeAfterTreatmentID,
    //                 StandardID: standardID,
    //                 UnitID: values.unitID,
    //                 EmployeeID: employeeID,
    //                 Note: values.note,
    //             };

    //             const response = await CreatePH(payload);

    //             if ((response as any)?.status === 201) {
    //                 messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    //                 form.resetFields();
    //                 setSelectedTreatmentID(null);
    //                 setUseCustomStandard(false);
    //             } else {
    //                 message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    //             }
    //         }
    //     } catch (error: any) {
    //         console.error('Error creating pH:', error);
    //         message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    //     }
    // };

    /* */
    // const handleFinish = async (values: any) => {
    //     try {
    //         let standardID = values.standardID ?? null;

    //         // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ä‡πâ custom standard
    //         if (useCustomStandard) {
    //             if (standardType === 'middle' && customSingleValue !== undefined) {
    //                 // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß custom
    //                 const newStandard = await AddMiddleStandard({ MiddleValue: customSingleValue });
    //                 if (newStandard && newStandard.ID) {
    //                     standardID = newStandard.ID;
    //                     setMiddleStandards(prev => [...prev, newStandard]); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á state
    //                 }
    //             } else if (
    //                 standardType === 'range' &&
    //                 customMinValue !== undefined &&
    //                 customMaxValue !== undefined
    //             ) {
    //                 // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á custom
    //                 const newStandard = await AddRangeStandard({
    //                     MinValue: customMinValue,
    //                     MaxValue: customMaxValue,
    //                 });
    //                 if (newStandard && newStandard.ID) {
    //                     standardID = newStandard.ID;
    //                     setRangeStandards(prev => [...prev, newStandard]); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á state
    //                 }
    //             }
    //         }

    //         // ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    //         const dateValue = values.date ?? dayjs();
    //         const timeValue = values.time ?? dayjs();
    //         const combinedDate = dateValue.set('hour', timeValue.hour()).set('minute', timeValue.minute());
    //         const employeeID = Number(localStorage.getItem('employeeid'));

    //         if (selectedTreatmentID === 3) {
    //             // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
    //             const payloadBefore: CreatePHInterface = {
    //                 Date: combinedDate.toISOString(),
    //                 Data: values.valueBefore,
    //                 BeforeAfterTreatmentID: 1,
    //                 StandardID: standardID,
    //                 UnitID: values.unitID,
    //                 EmployeeID: employeeID,
    //                 Note: values.note,
    //             };

    //             const payloadAfter: CreatePHInterface = {
    //                 Date: combinedDate.toISOString(),
    //                 Data: values.valueAfter,
    //                 BeforeAfterTreatmentID: 2,
    //                 StandardID: standardID,
    //                 UnitID: values.unitID,
    //                 EmployeeID: employeeID,
    //                 Note: values.note,
    //             };

    //             const res1 = await CreatePH(payloadBefore);
    //             const res2 = await CreatePH(payloadAfter);

    //             if ((res1 as any)?.status === 201 && (res2 as any)?.status === 201) {
    //                 messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    //                 form.resetFields();
    //                 setSelectedTreatmentID(null);
    //                 setUseCustomStandard(false);
    //             } else {
    //                 message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ');
    //             }
    //         } else {
    //             // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏•‡∏±‡∏á)
    //             const payload: CreatePHInterface = {
    //                 Date: combinedDate.toISOString(),
    //                 Data: values.data,
    //                 BeforeAfterTreatmentID: values.beforeAfterTreatmentID,
    //                 StandardID: standardID,
    //                 UnitID: values.unitID,
    //                 EmployeeID: employeeID,
    //                 Note: values.note,
    //             };

    //             const response = await CreatePH(payload);

    //             if ((response as any)?.status === 201) {
    //                 messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    //                 form.resetFields();
    //                 setSelectedTreatmentID(null);
    //                 setUseCustomStandard(false);
    //             } else {
    //                 message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    //             }
    //         }

    //         // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ custom input ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    //         setCustomSingleValue(undefined);
    //         setCustomMinValue(undefined);
    //         setCustomMaxValue(undefined);

    //     } catch (error: any) {
    //         console.error('Error creating pH:', error);
    //         message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    //     }
    // };

    const handleFinish = async (values: any) => {
        try {
            let standardID = values.standardID ?? null;

            // ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (custom standard)
            if (useCustomStandard) {
                if (standardType === 'middle' && values.customSingle !== undefined) {
                    const res = await AddMiddleStandard({
                        MiddleValue: values.customSingle,
                        MinValue: 0,
                        MaxValue: 0,
                    });

                    if (res && res.ID) {
                        standardID = res.ID;
                        setMiddleStandards(prev => [...prev, res]);
                    }
                } else if (
                    standardType === 'range' &&
                    values.customMin !== undefined &&
                    values.customMax !== undefined
                ) {
                    const res = await AddRangeStandard({
                        MiddleValue: 0,
                        MinValue: values.customMin,
                        MaxValue: values.customMax,
                    });

                    if (res && res.ID) {
                        standardID = res.ID;
                        setRangeStandards(prev => [...prev, res]);
                    }
                }
            }

            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ standardID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!standardID) {
                message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
                return;
            }

            // ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
            const dateValue = values.date ?? dayjs();
            const timeValue = values.time ?? dayjs();
            const combinedDate = dateValue.set('hour', timeValue.hour()).set('minute', timeValue.minute());

            // ‡∏î‡∏∂‡∏á employeeID ‡∏à‡∏≤‡∏Å localStorage
            const employeeID = Number(localStorage.getItem('employeeid'));

            if (selectedTreatmentID === 3) {
                // ‡∏Å‡∏£‡∏ì‡∏µ "‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î" ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡∏ä‡∏∏‡∏î
                const payloadBefore: CreatePHInterface = {
                    Date: combinedDate.toISOString(),
                    Data: values.valueBefore,
                    BeforeAfterTreatmentID: 1,
                    StandardID: standardID,
                    UnitID: values.unitID,
                    EmployeeID: employeeID,
                    Note: values.note,
                };

                const payloadAfter: CreatePHInterface = {
                    Date: combinedDate.toISOString(),
                    Data: values.valueAfter,
                    BeforeAfterTreatmentID: 2,
                    StandardID: standardID,
                    UnitID: values.unitID,
                    EmployeeID: employeeID,
                    Note: values.note,
                };

                const res1 = await CreatePH(payloadBefore);
                const res2 = await CreatePH(payloadAfter);

                if ((res1 as any)?.status === 201 && (res2 as any)?.status === 201) {
                    messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    form.resetFields();
                    setSelectedTreatmentID(null);
                    setUseCustomStandard(false);
                } else {
                    message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ');
                }
            } else {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                const payload: CreatePHInterface = {
                    Date: combinedDate.toISOString(),
                    Data: values.data,
                    BeforeAfterTreatmentID: values.beforeAfterTreatmentID,
                    StandardID: standardID,
                    UnitID: values.unitID,
                    EmployeeID: employeeID,
                    Note: values.note,
                };

                const response = await CreatePH(payload);

                if ((response as any)?.status === 201) {
                    messageApi.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pH ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    form.resetFields();
                    setSelectedTreatmentID(null);
                    setUseCustomStandard(false);
                } else {
                    message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
                }
            }

            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
            setCustomSingleValue(undefined);
            setCustomMinValue(undefined);
            setCustomMaxValue(undefined);
        } catch (error) {
            console.error('Error creating pH:', error);
            message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        }
    };

    const handleCancel = () => {
        form.resetFields();
        setSelectedTreatmentID(null);
        setUseCustomStandard(false);
    };

    return (
        <div className="ph-container">
            {contextHolder}
            <Form
                form={form}
                layout="vertical"
                onFinish={handleFinish}
                initialValues={{
                    date: dayjs(),
                    time: dayjs(),
                    standardType: 'middle',
                }}
            >
                <div className="form-group-ph">
                    <Form.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="date">
                        <DatePicker format="DD/MM/YYYY" className="full-width-ph" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô" />
                    </Form.Item>
                    <Form.Item label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" name="time">
                        <TimePicker format="HH:mm" className="full-width-ph" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤" />
                    </Form.Item>
                </div>

                <div className="form-group-ph">
                    <div className="form-group-mini-ph">
                        <Form.Item
                            label="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î"
                            name="unitID"
                            rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î' }]}
                        >
                            <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢">
                                {unitOptions.map((u) => (
                                    <Option key={u.ID} value={u.ID}>
                                        {u.UnitName}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>
                    </div>
                    <div className="form-group-mini-ph">
                        <Form.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô" name="standardType">
                            <Select defaultValue="middle" onChange={handleStandardGroupChange}>
                                <Option value="middle">‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß</Option>
                                <Option value="range">‡∏ä‡πà‡∏ß‡∏á (Min - Max)</Option>
                            </Select>
                        </Form.Item>

                        <div style={{ position: 'relative', top: '-15px' }}>
                            {/* ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß */}
                            {standardType === 'middle' && !useCustomStandard && (
                                <Form.Item
                                    label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"
                                    name="standardID"
                                    rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß' }]}
                                >
                                    <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß" onChange={handleStandardSelectChange}>
                                        {middleStandards.map((s) => (
                                            <Option key={s.ID} value={s.ID}>
                                                {s.MiddleValue}
                                            </Option>
                                        ))}
                                        <Option value="custom">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)</Option>
                                    </Select>
                                </Form.Item>
                            )}

                            {standardType === 'middle' && useCustomStandard && (
                                <Form.Item
                                    label="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)"
                                    name="customSingle"
                                    rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á' }]}
                                >
                                    <InputNumber
                                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á"
                                        style={{ width: '100%' }}
                                        value={customSingleValue}
                                        onChange={(value) => setCustomSingleValue(value ?? undefined)}
                                    />
                                </Form.Item>
                            )}

                            {/* ‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á */}
                            {standardType === 'range' && !useCustomStandard && (
                                <Form.Item
                                    label="‡∏ä‡πà‡∏ß‡∏á (Min - Max)"
                                    name="standardID"
                                    rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô' }]}
                                >
                                    <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á" onChange={handleStandardSelectChange}>
                                        {rangeStandards.map((s) => (
                                            <Option key={s.ID} value={s.ID}>
                                                {s.MinValue} - {s.MaxValue}
                                            </Option>
                                        ))}
                                        <Option value="custom">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏ä‡πà‡∏ß‡∏á)</Option>
                                    </Select>
                                </Form.Item>
                            )}

                            {standardType === 'range' && useCustomStandard && (
                                <div className="ph-fornt-small">
                                    <Form.Item
                                        label="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (Min)"
                                        name="customMin"
                                        rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î' }]}
                                        style={{ flex: 1 }}
                                    >
                                        <InputNumber
                                            placeholder="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"
                                            style={{ width: '100%' }}
                                            value={customMinValue}
                                            onChange={(value) => setCustomMinValue(value ?? undefined)}
                                        />
                                    </Form.Item>
                                    <Form.Item
                                        label="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Max)"
                                        name="customMax"
                                        rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î' }]}
                                        style={{ flex: 1 }}
                                    >
                                        <InputNumber
                                            placeholder="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
                                            style={{ width: '100%' }}
                                            value={customMaxValue}
                                            onChange={(value) => setCustomMaxValue(value ?? undefined)}
                                        />
                                    </Form.Item>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                <div className="form-group-ph">
                    <div className="form-group-mini-ph">
                        <Form.Item
                            label="‡∏Å‡πà‡∏≠‡∏ô / ‡∏´‡∏•‡∏±‡∏á / ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
                            name="beforeAfterTreatmentID"
                            rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' }]}
                        >
                            <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" onChange={(value) => setSelectedTreatmentID(value)}>
                                {beforeAfterOptions.map((b) => (
                                    <Option key={b.ID} value={b.ID}>
                                        {renderCustomTreatmentLabel(b.TreatmentName || '')}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>
                    </div>
                    <div className="form-group-mini-ph">
                        {selectedTreatmentID === 3 ? (
                            <div style={{ display: 'flex', gap: '30px' }}>
                                <Form.Item
                                    label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
                                    name="valueBefore"
                                    rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
                                    style={{ flex: 1 }}
                                >
                                    <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
                                </Form.Item>

                                <Form.Item
                                    label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î"
                                    name="valueAfter"
                                    rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î' }]}
                                    style={{ flex: 1 }}
                                >
                                    <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
                                </Form.Item>
                            </div>
                        ) : (
                            <Form.Item
                                label="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ"
                                name="data"
                                rules={[{ required: true, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ' }]}
                            >
                                <InputNumber style={{ width: '100%' }} placeholder="‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ" />
                            </Form.Item>
                        )}
                    </div>
                </div>

                <div className="form-group-ph">
                    <Form.Item label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" name="note">
                        <Input.TextArea rows={2} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" />
                    </Form.Item>
                </div>

                <Form.Item className="form-actions-ph">
                    <Button className="cancel-ph" htmlType="button" onClick={handleCancel}>
                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </Button>
                    <Button htmlType="reset" className="reset-ph">
                        ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
                    </Button>
                    <Button type="primary" htmlType="submit" className="submit-ph">
                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    </Button>
                </Form.Item>
            </Form>
        </div>
    );
};

export default PHCentralForm;
