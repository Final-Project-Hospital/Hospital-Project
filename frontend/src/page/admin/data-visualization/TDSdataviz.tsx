import React, { useEffect, useState } from "react";
import { DatePicker, Input, Select, Tooltip, Modal, message } from "antd";
import { EditOutlined, DeleteOutlined } from '@ant-design/icons';
import ApexChart from "react-apexcharts";
import { ApexOptions } from "apexcharts";
import { GetTDS, DeleteAllTDSRecordsByDate } from "../../../services/tdsService";
import './TDSdataviz.css';
import { LeftOutlined, SearchOutlined, ExclamationCircleFilled, CloseCircleFilled, CheckCircleFilled, QuestionCircleFilled, } from "@ant-design/icons";
import Table, { ColumnsType } from "antd/es/table";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import TDSCentralForm from '../data-management/TDScenter/TDScenter'
import UpdateTDSCentralForm from '../data-management/TDScenter/updateTDScenter'
import { GetTDSbyID } from '../../../services/tdsService';

dayjs.extend(utc);
dayjs.extend(timezone);

const TDSdataviz: React.FC = () => {
  const [chartTypeBefore, setChartTypeBefore] = useState<'line' | 'bar'>('line');
  const [chartTypeAfter, setChartTypeAfter] = useState<'line' | 'bar'>('line');
  const [chartTypeCompare1, setChartTypeCompare1] = useState<'line' | 'bar'>('line');
  const [chartTypeCompare2, setChartTypeCompare2] = useState<'line' | 'bar'>('line');

  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [compareData, setCompareData] = useState<{ date: string; before: number; after: number }[]>([]);
  const [beforeData, setBeforeData] = useState<{ date: string; data: number }[]>([]);
  const [afterData, setAfterData] = useState<{ date: string; data: number }[]>([]);
  const [selectedMonth, setSelectedMonth] = useState<dayjs.Dayjs | null>(null);
  const [selectedYear, setSelectedYear] = useState<dayjs.Dayjs | null>(null);
  const [search, setSearch] = useState("");
  const [isModalVisible, setIsModalVisible] = useState(false);

  const [isEditModalVisible, setIsEditModalVisible] = useState(false);
  const [editingRecord, setEditRecord] = useState<any>(null);

  const handleAddModalCancel = () => setIsModalVisible(false);
  const handleEditModalCancel = () => setIsEditModalVisible(false);

  const { confirm } = Modal;

  // ‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await GetTDS();
      if (!response || response.length === 0) {
        setError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TDS");
        console.log(error);
        setLoading(false);
        return;
      }
      const processedData = response.map((item: any) => {
        const dt = dayjs(item.date);
        return {
          ...item,
          dateOnly: dt.format("DD-MM-YYYY"),
          timeOnly: dt.format("HH:mm:ss"),

          // ‡πÉ‡∏ä‡πâ before_note ‡πÅ‡∏•‡∏∞ after_note ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏•‡∏¢
          before_note: item.before_note || '',
          after_note: item.after_note || '',
        };
      });

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏Å‡πà‡∏≤
      processedData.sort((a: any, b: any) =>
        dayjs(b.date).diff(dayjs(a.date))
      );

      console.log(processedData)
      setData(processedData);

      const before = processedData
        .filter((item: any) => item.before_value !== undefined && item.before_value !== null)
        .map((item: any) => ({ date: item.dateOnly, data: item.before_value || 0 }));

      const after = processedData
        .filter((item: any) => item.after_value !== undefined && item.after_value !== null)
        .map((item: any) => ({ date: item.dateOnly, data: item.after_value || 0 }));

      const combinedMap: Record<string, { before: number; after: number }> = {};

      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• before & after ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ date ‡πÄ‡∏õ‡πá‡∏ô key
      processedData.forEach((item: any) => {
        if (!combinedMap[item.dateOnly]) {
          combinedMap[item.dateOnly] = { before: 0, after: 0 };
        }
        if (item.before_value !== undefined && item.before_value !== null) {
          combinedMap[item.dateOnly].before = item.before_value;
        }
        if (item.after_value !== undefined && item.after_value !== null) {
          combinedMap[item.dateOnly].after = item.after_value;
        }
      });

      const compare = Object.entries(combinedMap).map(([date, values]) => ({
        date,
        before: values.before,
        after: values.after,
      }));

      setBeforeData(before);
      setAfterData(after);
      setCompareData(compare);

    } catch (err) {
      console.error("Error fetching TDS data:", err);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  //‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
  const getChartOptions = (categories: string[]): ApexOptions => ({
    chart: { id: 'tds-chart', toolbar: { show: true } },
    xaxis: { categories, title: { text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' } },
    yaxis: { title: { text: 'mg/L' } },
    tooltip: { enabled: true },
    dataLabels: { enabled: false },
    stroke: { curve: "smooth" },
  });
  //‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
  const beforeSeries = [{ name: "TDS", data: beforeData.map((item) => item.data) }];
  const afterSeries = [{ name: "TDS", data: afterData.map((item) => item.data) }];
  const compareSeries = [
    { name: "‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î", data: compareData.map(item => item.before) },
    { name: "‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î", data: compareData.map(item => item.after) },
  ];

  // ‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
  const columns: ColumnsType<any> = [
    {
      title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
      dataIndex: 'date',
      key: 'date',
      width: 130,
    },
    {
      title: '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î',
      dataIndex: 'unit',
      key: 'unit',
      width: 145,
      render: (unit: string) => unit || '-',
    },
    {
      title: '‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
      dataIndex: 'standard_value',
      key: 'standard_value',
      width: 130,
      render: (val: number) => val ?? '-',
    },
    {
      title: '‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≥‡∏ö‡∏±‡∏î',
      dataIndex: 'before_value',
      key: 'before_value',
      width: 120,
      render: (val: number | null) => val ?? '-',
    },
    {
      title: '‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≥‡∏ö‡∏±‡∏î',
      dataIndex: 'after_value',
      key: 'after_value',
      width: 120,
      render: (val: number | null) => val ?? '-',
    },
    {
      title: (
        <>
          ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
          <br />
          ( ‡∏Å‡πà‡∏≠‡∏ô / ‡∏´‡∏•‡∏±‡∏á )
        </>
      ),
      dataIndex: 'note',
      key: 'note',
      width: 150,
      render: (_: any, record: any) => {
        const beforeNote = record.before_note || '-';
        const afterNote = record.after_note || '-';
        return [beforeNote, afterNote].filter(Boolean).join(' / ');
      },
    },
    {
      title: (
        <>
          ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
          <br />
          ( % )
        </>
      ),
      key: 'efficiency',
      width: 120,
      render: (_: any, record: any) => {
        const { efficiency } = record;
        if (typeof efficiency === 'number') {
          const safeEff = efficiency < 0 ? 0 : efficiency; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
          return safeEff.toFixed(2);
        }
        return '-';
      },
    },
    {
      title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
      key: 'status',
      width: 200,
      render: (_, record) => {
        const statusName = record.status;  // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

        if (!statusName) {
          return (
            <span className="status-badge status-none">
              <QuestionCircleFilled style={{ fontSize: 20 }} />
              ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </span>
          );
        }

        if (statusName.includes("‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤")) {
          return (
            <span className="status-badge status-low">
              <ExclamationCircleFilled style={{ marginBottom: -4, fontSize: 18 }} />
              {statusName}
            </span>
          );
        }

        if (statusName.includes("‡πÄ‡∏Å‡∏¥‡∏ô")) {
          return (
            <span className="status-badge status-high">
              <CloseCircleFilled style={{ marginBottom: -4, fontSize: 18 }} />
              {statusName}
            </span>
          );
        }

        if (statusName.includes("‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô")) {
          return (
            <span className="status-badge status-good">
              <CheckCircleFilled style={{ marginBottom: -4, fontSize: 18 }} />
              {statusName}
            </span>
          );
        }
      }
    },

    {
      title: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      key: 'action',
      className: 'darker-column',
      width: 120,
      render: (_: any, record: any) => {
        console.log('record:', record);
        return (
          <div className="action-buttons">
            <Tooltip title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç">
              <button
                className="circle-btn edit-btn"
                onClick={() => handleEdit([record.before_id, record.after_id])}
              >
                <EditOutlined />
              </button>
            </Tooltip>
            <Tooltip title="‡∏•‡∏ö">
              <button
                className="circle-btn delete-btn"
                onClick={() => handleDelete([record.before_id, record.after_id])}  // ‚úÖ ‡∏™‡πà‡∏á ID ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
              >
                <DeleteOutlined />
              </button>
            </Tooltip>
          </div>
        );
      }
    }
  ];

  const showModal = () => {
    setEditRecord(null);
    setIsModalVisible(true);
  };

  // ‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
  const handleEdit = async (ids: (number | undefined)[]) => {
    console.log("IDs:", ids);

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà undefined ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà null
    const filteredIds = ids.filter((id): id is number => typeof id === 'number');

    if (filteredIds.length === 0) {
      message.error("‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
      return;
    }

    try {
      const responses = await Promise.all(filteredIds.map((id) => GetTDSbyID(id)));
      const validData = responses
        .filter((res) => res && res.status === 200)
        .map((res) => res.data);

      if (validData.length === 0) {
        message.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
        return;
      }

      setEditRecord(validData);
      setIsEditModalVisible(true);
    } catch (error) {
      console.error("Error fetching TDS data:", error);
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  // ‡πÉ‡∏´‡∏°‡πà
  const handleDelete = (ids: (number | null | undefined)[] | number | null | undefined) => {
    let validIds: number[] = [];

    if (Array.isArray(ids)) {
      validIds = ids.filter((id): id is number => typeof id === "number" && id !== null);
    } else if (typeof ids === "number") {
      validIds = [ids];
    }

    if (validIds.length === 0) {
      message.error("‡πÑ‡∏°‡πà‡∏°‡∏µ ID ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö");
      return;
    }

    const firstId = validIds[0];

    confirm({
      title: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      icon: <ExclamationCircleFilled />,
      content: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      okText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢",
      okType: "danger",
      cancelText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      async onOk() {
        try {
          await DeleteAllTDSRecordsByDate(firstId);
          message.success("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
          await fetchData();
        } catch (error) {
          message.error("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
      },
    });
  };

  return (
    <div>
      <div className="title-header">
        <h1>TDS-Central</h1>
        <p>‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏£‡∏ô‡∏≤‡∏£‡∏µ ‡πÑ‡∏î‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°</p>
      </div>

      <div className="tds-title">
        <h1 className="tds-title-text"><LeftOutlined className="tds-back-icon" />TDS-GRAPH</h1>
        <div className="select-group">
          <DatePicker picker="month" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" onChange={(value) => setSelectedMonth(value)} value={selectedMonth} />
          <DatePicker picker="year" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ" onChange={(value) => setSelectedYear(value)} value={selectedYear} />
        </div>
      </div>

      <div className="graph-container">
        <div className="graph-card">
          <h2>‡∏ô‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≥‡∏ö‡∏±‡∏î</h2>
          <Select value={chartTypeBefore} onChange={val => setChartTypeBefore(val)} style={{ marginBottom: 10 }}>
            <Select.Option value="line">‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô (Line Chart)</Select.Option>
            <Select.Option value="bar">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Bar Chart)</Select.Option>
          </Select>
          <ApexChart options={getChartOptions(beforeData.map(item => item.date))} series={beforeSeries} type={chartTypeBefore} height={350} />
        </div>

        <div className="graph-card">
          <h2>‡∏ô‡πâ‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î</h2>
          <Select value={chartTypeAfter} onChange={val => setChartTypeAfter(val)} style={{ marginBottom: 10 }}>
            <Select.Option value="line">‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô (Line Chart)</Select.Option>
            <Select.Option value="bar">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Bar Chart)</Select.Option>
          </Select>
          <ApexChart options={getChartOptions(afterData.map(item => item.date))} series={afterSeries} type={chartTypeAfter} height={350} />
        </div>

        <div className="graph-card">
          <h2>‡∏ô‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô - ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î</h2>
          <Select value={chartTypeCompare1} onChange={val => setChartTypeCompare1(val)} style={{ marginBottom: 10 }}>
            <Select.Option value="line">‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô (Line Chart)</Select.Option>
            <Select.Option value="bar">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Bar Chart)</Select.Option>
          </Select>
          <ApexChart options={getChartOptions(compareData.map(item => item.date))} series={compareSeries} type={chartTypeCompare1} height={350} />
        </div>

        <div className="graph-card">
          <h2>‡∏ô‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô - ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î</h2>
          <Select value={chartTypeCompare2} onChange={val => setChartTypeCompare2(val)} style={{ marginBottom: 10 }}>
            <Select.Option value="line">‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô (Line Chart)</Select.Option>
            <Select.Option value="bar">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Bar Chart)</Select.Option>
          </Select>
          <ApexChart options={getChartOptions(compareData.map(item => item.date))} series={compareSeries} type={chartTypeCompare2} height={350} />
        </div>
      </div>

      {/*‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á*/}
      <div className="tds-header-vis">
        <div className="tds-title-search-vis">
          <h1 className="tds-title-text">TDS DATA</h1>
          <div>
            <div className="search-box-tds">
              <Input
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                prefix={<SearchOutlined />}
                className="search-input"
              />
            </div>
          </div>
        </div>
        <div className="btn-container">
          <button className="add-btn" onClick={showModal}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà</button>
        </div>
      </div>

      <div className="table-tdsdata">
        <h1 className="tds-title-text-table">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô</h1>
        <Table
          columns={columns}
          dataSource={data.filter((d: any) =>
            dayjs(d.date).format('YYYY-MM-DD').includes(search)
          )}
          rowKey="ID"
          loading={loading}
          pagination={{
            defaultPageSize: 10,
            showSizeChanger: true,
            pageSizeOptions: ['7', '10', '15', '30', '100'],
          }}
          bordered
        />
      </div>

      <div className="tds-central-statistics">
        <h1 className="tds-title-text">TDS-Central Statistics</h1>
        <h2>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤ ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ô‡πâ‡∏≥ ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏ô‡πç‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á</h2>
      </div>

      <Modal
        title={"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TDS ‡πÉ‡∏´‡∏°‡πà"}
        open={isModalVisible}
        footer={null}
        width={1100}
        destroyOnClose
        closable={false}
      >
        <TDSCentralForm onCancel={handleAddModalCancel} />
      </Modal>

      <Modal
        title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TDS"
        open={isEditModalVisible}
        footer={null}
        width={1100}
        closable={false}
      >
        {editingRecord && (
          <UpdateTDSCentralForm
            initialValues={editingRecord}
            onSuccess={() => {
              setIsEditModalVisible(false);
              setEditRecord(null);
              fetchData();
            }}
            onCancel={handleEditModalCancel}
          />
        )}
      </Modal>

    </div >
  );
};

export default TDSdataviz;
