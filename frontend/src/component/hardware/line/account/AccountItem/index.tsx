// AccountItem.tsx
import {
  Avatar,
  Badge,
  List,
  theme,
  Typography,
  message,
  Modal,
  Button,
  Form,
  Input
} from "antd";
import { NotificationInterface } from "../../../../../interface/INotification";
import {
  UpdateAlertByNotificationID,
  DeleteNotificationByID,
  UpdateNotificationByID
} from "../../../../../services/hardware";
import { useState } from "react";
import { useNotificationContext } from "../../NotificationContext";
import {
  DeleteOutlined,
  ExclamationCircleOutlined,
  EditOutlined,
  UserOutlined
} from "@ant-design/icons";
import { useStateContext } from "../../../../../contexts/ContextProvider"; 

const { useToken } = theme;

const AccountItem = ({ item }: { item: NotificationInterface }) => {
  const { token } = useToken();
  const [alert, setAlert] = useState<boolean>(item.Alert);
  const { triggerReload } = useNotificationContext();

  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);

  // ‚úÖ State Modal Edit
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [form] = Form.useForm();
  const [saving, setSaving] = useState(false);

  // ‚úÖ ‡πÉ‡∏ä‡πâ reloadKey ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
  const { bumpReload } = useStateContext();

  // ‚úÖ Toggle Alert
  const handleToggleAlert = async () => {
    try {
      const newAlert = !alert;
      const res = await UpdateAlertByNotificationID(item.ID, newAlert);
      if (res) {
        setAlert(res.Alert);
        triggerReload();
        bumpReload(); // ‚úÖ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü/‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤ reloadKey ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏î‡πâ‡∏ß‡∏¢
        message.success(
          `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${res.Alert ? "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" : "‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"}`
        );
      } else {
        message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ");
      }
    } catch (error) {
      console.error(error);
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
    }
  };

  // ‚úÖ Delete Notification
  const handleDelete = async () => {
    try {
      const res = await DeleteNotificationByID(item.ID);
      if (res) {
        message.success("‡∏•‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡πà‡∏≠‡∏ô ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        triggerReload();
        bumpReload(); // ‚úÖ ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ RoomAdminTable/MainLine
      } else {
        message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡πà‡∏≠‡∏ô ‡πÑ‡∏î‡πâ");
      }
    } catch (error) {
      console.error(error);
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
    } finally {
      setIsDeleteModalOpen(false);
    }
  };

  // ‚úÖ Edit Notification
  const handleEdit = () => {
    form.setFieldsValue({
      Name: item.Name,
      UserID: item.UserID,
    });
    setIsEditModalOpen(true);
  };

  const handleSaveEdit = async () => {
    try {
      const values = await form.validateFields();
      setSaving(true);
      const res = await UpdateNotificationByID(item.ID, {
        name: values.Name,        // üëà ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô name
        user_id: values.UserID,   // üëà ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô user_id
      });
      if (res) {
        message.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡πà‡∏≠‡∏ô ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        setIsEditModalOpen(false);
        triggerReload();
        bumpReload(); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
      } else {
        message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡πà‡∏≠‡∏ô ‡πÑ‡∏î‡πâ");
      }
    } catch (error) {
      console.error(error);
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
    } finally {
      setSaving(false);
    }
  };

  return (
    <>
      <List.Item
        key={item.ID}
        className="cursor-pointer flex justify-between items-center"
      >
        <List.Item.Meta
          avatar={
            item.UserID ? (
              <Avatar
                src={`https://api.dicebear.com/7.x/identicon/svg?seed=${item.UserID}`}
                size={40}
              />
            ) : (
              <Avatar src="https://via.placeholder.com/40" size={40} />
            )
          }
          title={
            <>
              {item.Name || "No name"}{" "}
              <span className="text-xs text-gray-500">
                {"created at"}{" "}
                {item.CreatedAt
                  ? new Date(item.CreatedAt).toLocaleString()
                  : "Unknown"}
              </span>
            </>
          }
          description={
            <Typography.Paragraph
              type={"secondary"}
              className="text-xs m-0"
            >
              <span
                style={{ color: token.colorLink }}
              >
                UserID: {item.UserID || "N/A"}
              </span>
            </Typography.Paragraph>
          }
        />

        <div className="flex items-center gap-3">
          {/* Toggle Alert */}
          <div onClick={handleToggleAlert} className="cursor-pointer">
            <Badge
              count={alert ? "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" : "‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"}
              color={alert ? "green" : "red"}
            />
          </div>

          {/* Edit Button */}
          <Button
            type="primary"
            icon={<EditOutlined />}
            size="small"
            onClick={handleEdit}
            style={{
              backgroundColor: "#14b8a6",
              borderColor: "#14b8a6",
            }}
          />

          {/* Delete Button */}
          <Button
            danger
            type="primary"
            icon={<DeleteOutlined />}
            size="small"
            onClick={() => setIsDeleteModalOpen(true)}
          />
        </div>
      </List.Item>

      {/* ‚úÖ Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö */}
      <Modal
        title={
          <div className="flex items-center gap-2">
            <ExclamationCircleOutlined style={{ color: "#faad14" }} />
            <span>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡πà‡∏≠‡∏ô</span>
          </div>
        }
        open={isDeleteModalOpen}
        onOk={handleDelete}
        onCancel={() => setIsDeleteModalOpen(false)}
        okText="‡∏•‡∏ö"
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        centered
        okButtonProps={{ danger: true }}
      >
        <p>
          ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö{" "}
          <b style={{ color: token.colorError }}>{item.Name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠"}</b> ?
        </p>
      </Modal>

      {/* ‚úÖ Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Notification */}
      <Modal
        title={
          <div className="flex items-center gap-2 text-teal-600 font-bold">
            <EditOutlined /> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡πà‡∏≠‡∏ô
          </div>
        }
        open={isEditModalOpen}
        onCancel={() => setIsEditModalOpen(false)}
        centered
        width="500px"
        footer={[
          <Button key="cancel" onClick={() => setIsEditModalOpen(false)}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </Button>,
          <Button
            key="save"
            type="primary"
            loading={saving}
            onClick={handleSaveEdit}
            style={{
              background: "linear-gradient(to right, #14b8a6, #0d9488)",
              borderColor: "#0d9488",
            }}
          >
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </Button>,
        ]}
      >
        <Form layout="vertical" form={form}>
          <Form.Item
            label={
              <span className="flex items-center gap-1">
                <EditOutlined /> ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•
              </span>
            }
            name="Name"
            rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Name" }]}
          >
            <Input placeholder="‡∏ä‡∏∑‡πà‡∏≠ Notification" />
          </Form.Item>
          <Form.Item
            label={
              <span className="flex items-center gap-1">
                <UserOutlined /> UserID
              </span>
            }
            name="UserID"
            rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å UserID" }]}
          >
            <Input placeholder="UserID" />
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
};

export default AccountItem;
