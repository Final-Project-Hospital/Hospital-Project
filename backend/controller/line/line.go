package line

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"

	"github.com/Tawunchai/hospital-project/config"
	"github.com/Tawunchai/hospital-project/entity"
	"github.com/gin-gonic/gin"
)

const LineToken = "qNf5S5s+Rkqr0gFDW++ObPJzfhUbCbWwbEdCeDzVIzhsSqe3R1HyycZOtY2+NSuBCZ8NIWO9jhx/a2cmUA+kbuL3GNfyp5Ze+4sj5lBY403ndhyoEqlpI90eaV/Kp0sc92opJl5uAYH9QSIKIWpq1wdB04t89/1O/w1cDnyilFU="

func ListNotification(c *gin.Context) {
	var notifications []entity.Notification

	db := config.DB()
	if err := db.Find(&notifications).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, notifications)
}

func UpdateAlertByNotificationID(c *gin.Context) {
	id := c.Param("id")
	notificationID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	var input struct {
		Alert bool `json:"alert"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	db := config.DB()

	var notification entity.Notification
	if err := db.First(&notification, notificationID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Notification not found"})
		return
	}

	notification.Alert = input.Alert
	if err := db.Save(&notification).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤ UserID ‡∏ú‡πà‡∏≤‡∏ô LINE
	var message string
	if input.Alert {
		message = fmt.Sprintf(
			"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö %s üôå\n\n"+
				"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n"+
				"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"+
				"üîï *‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏•‡∏ô‡πå*\n"+
				"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:\n\n"+
				"üëâ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\n"+
				"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
			notification.Name,
		)
	} else {
		message = "‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß ‚ùå\n‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö üôè"
	}

	err = pushMessageToLine(notification.UserID, message)
	if err != nil {
		// log ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ client
		fmt.Printf("Failed to push message to LINE: %v\n", err)
	}

	c.JSON(http.StatusOK, notification)
}

func getLineToken() (string, error) {
	db := config.DB()
	var lineMaster entity.LineMaster

	if err := db.First(&lineMaster).Error; err != nil {
		return "", err
	}

	return lineMaster.Token, nil
}

func pushMessageToLine(userID, message string) error {
	url := "https://api.line.me/v2/bot/message/push"

	payload := map[string]interface{}{
		"to": userID,
		"messages": []map[string]string{
			{
				"type": "text",
				"text": message,
			},
		},
	}

	jsonBody, err := json.Marshal(payload)
	if err != nil {
		return err
	}

	token, err := getLineToken()
	if err != nil {
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Line Token ‡∏à‡∏≤‡∏Å DB ‡πÑ‡∏î‡πâ: %v", err)
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonBody))
	if err != nil {
		return err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+token)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("LINE API responded with status: %d", resp.StatusCode)
	}

	return nil
}

func DeleteNotificationByID(c *gin.Context) {
	id := c.Param("id") // ‡∏î‡∏∂‡∏á id ‡∏à‡∏≤‡∏Å URL param

	// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô uint
	notificationID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	db := config.DB()

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ notification ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
	var notification entity.Notification
	if err := db.First(&notification, notificationID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Notification not found"})
		return
	}

	// ‚úÖ ‡∏•‡∏ö RoomNotification ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö NotificationID ‡∏ô‡∏µ‡πâ
	if err := db.Where("notification_id = ?", notificationID).Delete(&entity.RoomNotification{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete related RoomNotifications"})
		return
	}

	// ‚úÖ ‡∏•‡∏ö Notification
	if err := db.Delete(&notification).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Notification and related RoomNotifications deleted successfully"})
}

func DeleteRoomNotificationByNotificationID(c *gin.Context) {
	id := c.Param("id")

	notificationID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid Notification ID"})
		return
	}

	db := config.DB()

	if err := db.Where("notification_id = ?", notificationID).
		Delete(&entity.RoomNotification{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete RoomNotifications"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "RoomNotifications deleted successfully"})
}

func ListRoomNotification(c *gin.Context) {
	var roomNotifications []entity.RoomNotification

	db := config.DB()
	if err := db.Preload("Room").Preload("Notification").Find(&roomNotifications).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, roomNotifications)
}

type CreateRoomNotificationInput struct {
	RoomID         uint `json:"room_id" binding:"required"`
	NotificationID uint `json:"notification_id" binding:"required"`
}

func CreateRoomNotification(c *gin.Context) {
	var input CreateRoomNotificationInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	roomNotification := entity.RoomNotification{
		RoomID:         input.RoomID,
		NotificationID: input.NotificationID,
	}

	db := config.DB()
	if err := db.Create(&roomNotification).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	if err := db.Preload("Room").Preload("Notification").First(&roomNotification, roomNotification.ID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, roomNotification)
}

// Update NotificationID ‡∏Ç‡∏≠‡∏á RoomNotification ‡∏ï‡∏≤‡∏° RoomID
func UpdateNotificationIDByRoomID(c *gin.Context) {
	db := config.DB()

	// ‡∏£‡∏±‡∏ö RoomID ‡∏à‡∏≤‡∏Å URL param
	roomIDParam := c.Param("room_id")
	roomID, err := strconv.ParseUint(roomIDParam, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid RoomID"})
		return
	}

	// ‡∏£‡∏±‡∏ö NotificationID ‡∏à‡∏≤‡∏Å body
	var requestBody struct {
		NotificationID uint `json:"notification_id"`
	}
	if err := c.ShouldBindJSON(&requestBody); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request body"})
		return
	}

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ RoomNotification ‡∏Ç‡∏≠‡∏á RoomID ‡∏ô‡∏µ‡πâ
	var roomNotification entity.RoomNotification
	if err := db.Where("room_id = ?", roomID).First(&roomNotification).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "RoomNotification not found"})
		return
	}

	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï NotificationID
	roomNotification.NotificationID = requestBody.NotificationID
	if err := db.Save(&roomNotification).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update NotificationID"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message":          "NotificationID updated successfully",
		"roomNotification": roomNotification,
	})
}

func GetLineMasterFirstID(c *gin.Context) {
	db := config.DB()
	var lineMaster entity.LineMaster

	// ‡πÉ‡∏ä‡πâ First() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏£‡∏Å
	if err := db.First(&lineMaster).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, &lineMaster)
}

func UpdateLineMasterByID(c *gin.Context) {
	db := config.DB()
	id := c.Param("id")

	var lineMaster entity.LineMaster
	if err := db.First(&lineMaster, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "LineMaster not found"})
		return
	}

	// struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö JSON ‡∏à‡∏≤‡∏Å request body
	var input struct {
		Token string `json:"token"`
	}
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	lineMaster.Token = input.Token

	if err := db.Save(&lineMaster).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, &lineMaster)
}