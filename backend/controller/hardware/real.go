package hardware

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/Tawunchai/hospital-project/config"
	"github.com/Tawunchai/hospital-project/entity"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

type ParameterWithData struct {
	Parameter string  `json:"parameter" binding:"required"`
	Data      float64 `json:"data" binding:"required"`
}

type HardwareInput struct {
	Name       string              `json:"name" binding:"required"`
	MacAddress string              `json:"mac_address" binding:"required"`
	Parameters []ParameterWithData `json:"parameters" binding:"required"`
}

const LineToken = "gvki3Wyt+y/sZKER+Gaex2EpillRDRDHvXq4+sYNE5jlLUcy2N2YIIONKwvMhqn8RxcaME5vQ3I1BW82d1/ZYezvWklVMUk+EGGfXRmI4jxn5I1vVbOsctQ7xNqB9n9A+Q/SRhEtXviKFCF9WOI/ZgdB04t89/1O/w1cDnyilFU="
const LineUserID = "U3af93a2f92b1048757172584d47571c8"

func SendWarningToLINE(message string) error {
	url := "https://api.line.me/v2/bot/message/push"
	body := map[string]interface{}{
		"to": LineUserID,
		"messages": []map[string]string{
			{"type": "text", "text": message},
		},
	}
	jsonBody, _ := json.Marshal(body)

	req, _ := http.NewRequest("POST", url, bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+LineToken)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	return nil
}

func ReadDataForHardware(c *gin.Context) {
	var input HardwareInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input"})
		return
	}

	db := config.DB()

	// ‚úÖ ‡πÄ‡∏ä‡πá‡∏Å‡∏à‡∏≤‡∏Å MAC ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‚Äî ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠)
	var hardware entity.Hardware
	if err := db.Where("mac_address = ?", input.MacAddress).First(&hardware).Error; err != nil {
		// ‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
		hardware = entity.Hardware{
			Name:       input.Name,
			MacAddress: input.MacAddress,
		}
		if err := db.Create(&hardware).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create hardware"})
			return
		}
	} else {
		// ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ß‡πà‡∏≤‡∏á)
		if strings.TrimSpace(hardware.Name) == "" && strings.TrimSpace(input.Name) != "" {
			db.Model(&hardware).Update("name", input.Name)
		}
	}

	// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° SensorData ‡∏Ç‡∏≠‡∏á hardware ‡∏ô‡∏µ‡πâ (‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
	var sensorData entity.SensorData
	if err := db.Where("hardware_id = ?", hardware.ID).First(&sensorData).Error; err != nil {
		sensorData = entity.SensorData{Date: time.Now(), HardwareID: hardware.ID}
		if err := db.Create(&sensorData).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create sensor data"})
			return
		}
	}

	// ‡πÇ‡∏´‡∏•‡∏î HardwareParameter ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° StandardHardware)
	var allParams []entity.HardwareParameter
	if err := db.Preload("StandardHardware").Find(&allParams).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch hardware parameters"})
		return
	}

	var createdSDPs []entity.SensorDataParameter
	var createdParamIDs []uint

	// ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ù‡∏±‡πà‡∏á Min)
	var nearUnderParts []string // ‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡πà‡∏≥ (Min < data ‚â§ Min*1.10)
	var underParts []string     // ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ (data < Min)

	for _, p := range input.Parameters {
		var hp entity.HardwareParameter
		needNew := true

		// ‡∏´‡∏≤ parameter ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö hardware ‡∏≠‡∏∑‡πà‡∏ô
		for _, ap := range allParams {
			if ap.Parameter == p.Parameter {
				var count int64
				db.Model(&entity.SensorDataParameter{}).
					Joins("JOIN sensor_data ON sensor_data.id = sensor_data_parameters.sensor_data_id").
					Where("sensor_data_parameters.hardware_parameter_id = ? AND sensor_data.hardware_id != ?", ap.ID, hardware.ID).
					Count(&count)
				if count == 0 {
					hp = ap
					needNew = false
					break
				}
			}
		}

		if needNew {
			// ‡∏™‡∏£‡πâ‡∏≤‡∏á Standard/Unit ‡πÄ‡∏õ‡∏•‡πà‡∏≤
			std := entity.StandardHardware{
				MaxValueStandard: 0.0, // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô logic ‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô schema
				MinValueStandard: 0.0,
			}
			unit := entity.UnitHardware{Unit: ""}
			if err := db.Create(&std).Error; err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create standard"})
				return
			}
			if err := db.Create(&unit).Error; err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create unit"})
				return
			}

			// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
			lowerParam := strings.ToLower(p.Parameter)
			colorID := uint(1) // default
			switch {
			case strings.Contains(lowerParam, "formaldehyde"), strings.Contains(p.Parameter, "‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏•‡∏î‡∏µ‡πÑ‡∏Æ‡∏î‡πå"):
				colorID = 1
			case strings.Contains(lowerParam, "temperature"), strings.Contains(p.Parameter, "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥"):
				colorID = 2
			case strings.Contains(lowerParam, "humidity"), strings.Contains(p.Parameter, "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô"):
				colorID = 3
			}

			hp = entity.HardwareParameter{
				Parameter:                p.Parameter,
				StandardHardwareID:       std.ID,
				UnitHardwareID:           unit.ID,
				HardwareGraphID:          1,
				HardwareParameterColorID: colorID,
				Icon:                     "GiChemicalDrop",
			}
			if err := db.Create(&hp).Error; err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create hardware parameter"})
				return
			}
			allParams = append(allParams, hp)
		}

		// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ SensorDataParameter
		sdp := entity.SensorDataParameter{
			Date:                time.Now(),
			Data:                p.Data,
			SensorDataID:        sensorData.ID,
			HardwareParameterID: hp.ID,
		}
		if err := db.Create(&sdp).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create sensor data parameter"})
			return
		}
		createdParamIDs = append(createdParamIDs, hp.ID)
		createdSDPs = append(createdSDPs, sdp)

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ù‡∏±‡πà‡∏á Min (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ > 0)
		var std entity.StandardHardware
		if err := db.First(&std, hp.StandardHardwareID).Error; err == nil {
			if std.MinValueStandard > 0 {
				min := std.MinValueStandard
				nearUpper := min * 1.10 // Min * 110%

				if p.Data < min {
					// ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
					underParts = append(underParts, fmt.Sprintf("- %s: %.2f (‡πÄ‡∏Å‡∏ì‡∏ë‡πå %.2f)", hp.Parameter, p.Data, min))
				} else if p.Data > min && p.Data <= nearUpper {
					// ‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ Min ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô Min*1.10)
					nearUnderParts = append(nearUnderParts, fmt.Sprintf("- %s: %.2f (‡πÄ‡∏Å‡∏ì‡∏ë‡πå %.2f)", hp.Parameter, p.Data, min))
				}
				// ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Min*1.10) ‚Üí ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á
			}
			// ‡∏ñ‡πâ‡∏≤ Min == 0 ‚Üí ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á
		}
	}

	// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
	// ‡∏´‡∏≤ Room ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á Hardware ‡∏ô‡∏µ‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏° preload Building
	var room entity.Room
	var buildingName string
	var floorStr string
	var roomName string

	if err := db.Preload("Building").
		Where("hardware_id = ?", hardware.ID).
		Order("created_at DESC").
		First(&room).Error; err == nil {
		roomName = safeStr(room.RoomName)
		floorStr = safeInt(room.Floor)
		if room.Building != nil {
			// ‡∏™‡∏°‡∏°‡∏ï‡∏¥ schema ‡πÉ‡∏ä‡πâ Building.BuildingName
			buildingName = safeStr(room.Building.BuildingName)
		} else {
			buildingName = "-"
		}
	} else if err != nil && err != gorm.ErrRecordNotFound {
		buildingName, floorStr, roomName = "-", "-", "-"
	} else {
		buildingName, floorStr, roomName = "-", "-", "-"
	}
	// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á LINE ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
	if len(nearUnderParts) > 0 || len(underParts) > 0 {
		loc, _ := time.LoadLocation("Asia/Bangkok")
		now := time.Now().In(loc).Format("2006-01-02 15:04:05")

		var sb strings.Builder
		sb.WriteString("‚ò£Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô!\n")
		sb.WriteString(fmt.Sprintf("üóìÔ∏è ‡πÄ‡∏ß‡∏•‡∏≤: %s\n", now))
		sb.WriteString(fmt.Sprintf("üè¢ ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£: %s\n", safeStr(buildingName)))
		sb.WriteString(fmt.Sprintf("üè¨ ‡∏ä‡∏±‡πâ‡∏ô: %s\n", safeStr(floorStr)))
		sb.WriteString(fmt.Sprintf("üö™ ‡∏´‡πâ‡∏≠‡∏á: %s\n", safeStr(roomName)))
		sb.WriteString(fmt.Sprintf("üì° ‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå: %s\n", safeStr(hardware.Name)))
		sb.WriteString(fmt.Sprintf("üÜî MAC: %s\n\n", safeStr(hardware.MacAddress)))

		if len(nearUnderParts) > 0 {
			sb.WriteString("‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:\n")
			sb.WriteString(strings.Join(nearUnderParts, "\n"))
			sb.WriteString("\n\n")
		}
		if len(underParts) > 0 {
			sb.WriteString("‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:\n")
			sb.WriteString(strings.Join(underParts, "\n"))
		} else {
			// ‡∏ï‡∏±‡∏î \n ‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏á
			msg := strings.TrimRight(sb.String(), "\n")
			go SendWarningToLINE(msg)
			goto RESP
		}

		go SendWarningToLINE(sb.String())
	}

RESP:
	c.JSON(http.StatusOK, gin.H{
		"hardware":               hardware,
		"sensor_data_id":         sensorData.ID,
		"created_parameter_ids":  createdParamIDs,
		"sensor_data_parameters": createdSDPs,
	})
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
func safeStr(s string) string {
	if strings.TrimSpace(s) == "" {
		return "-"
	}
	return s
}

func safeInt(i int) string {
	return strconv.Itoa(i)
}


type WebhookPayload struct {
	Events []struct {
		Message struct {
			Type string `json:"type"`
			Text string `json:"text"`
		} `json:"message"`
		Source struct {
			UserID string `json:"userId"`
		} `json:"source"`
	} `json:"events"`
}

func WebhookNotification(c *gin.Context) {
	var payload WebhookPayload

	// Parse JSON ‡∏à‡∏≤‡∏Å webhook
	if err := c.ShouldBindJSON(&payload); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ event ‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
	if len(payload.Events) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "no events found"})
		return
	}

	// ‡∏î‡∏∂‡∏á name (text message) ‡πÅ‡∏•‡∏∞ userId ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
	name := payload.Events[0].Message.Text
	userID := payload.Events[0].Source.UserID

	db := config.DB()
	var existing entity.Notification

	// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ UserID ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏´‡∏°
	if err := db.Where("user_id = ?", userID).First(&existing).Error; err == nil {
		// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí update name
		existing.Name = name
		if err := db.Save(&existing).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}
		c.JSON(http.StatusOK, existing)
		return
	}

	// ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí create ‡πÉ‡∏´‡∏°‡πà
	notification := entity.Notification{
		Name:   name,
		UserID: userID,
	}
	if err := db.Create(&notification).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, notification)
}